import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram import types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from handlers.start import router as start_router
from handlers.admin import router as admin_router
from handlers.poems import router as poems_router
from handlers.share import router as share_router
from handlers.voice import router as voice_router
from handlers.cancel import router as cancel_router
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ .env")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    token=BOT_TOKEN,
    session=AiohttpSession(),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(cancel_router)
dp.include_router(admin_router)
dp.include_router(start_router)
dp.include_router(poems_router)
dp.include_router(share_router)
dp.include_router(voice_router)


@dp.message(F.text.lower() == "/description")
async def description_command(message: types.Message, state: FSMContext):
    """
    –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞.
    """
    state_data = await state.get_data()
    hello_message_id = state_data.get("hello_message_id")
    if hello_message_id:
        try:
            await message.bot.delete_message(message.chat.id, hello_message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", callback_data="select_poem")]
        ]
    )
    await message.answer(
        (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä –ø–æ—ç–∑–∏–∏, –≥–¥–µ —Å—Ç–∏—Ö–∏ –æ–∂–∏–≤–∞—é—Ç –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –ª–µ–≥–∫–æ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ. "
            "–î–∞–≤–∞–π –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω—é–∞–Ω—Å–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.\n\n"
            "1Ô∏è‚É£ <b>–í—ã–±–æ—Ä —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è:</b>\n"
            "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±–∏–º–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏–ª–∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.\n\n"
            "2Ô∏è‚É£ <b>–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–±—è –∂–¥—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å —Å—Ç–∏—Ö –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. "
            "–° –∫–∞–∂–¥—ã–º —Å–ª–µ–¥—É—é—â–∏–º —É—Ä–æ–≤–Ω–µ–º —è –±—É–¥—É —É–±–∏—Ä–∞—Ç—å –∏–∑ —Å–ª–æ–≤ –≤—Å—ë –±–æ–ª—å—à–µ –±—É–∫–≤, –ø–æ–º–æ–≥–∞—è —Ç–µ–±–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å.\n\n"
            "3Ô∏è‚É£ <b>–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞:</b>\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª —Ç–µ–∫—Å—Ç, —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ. –≠—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è, "
            "–Ω–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ ‚Äì —É—Å–ª—ã—à–∞—Ç—å, –∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ –∑–≤—É—á–∏—Ç —Å—Ç–∏—Ö –≤ —Ç–≤–æ—ë–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏!\n\n"
            "‚ú® –ù–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –í–ø–µ—Ä—ë–¥, –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º –ø–æ—ç–∑–∏–∏! üìñ‚ú®"
        ),
        reply_markup=keyboard,
    )


@dp.message(F.text.lower() == "/contact")
async def contact_command(message: types.Message):
    """
    –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏.
    """
    await message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:\n"
        "üìß E-mail: \n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω:"
    )


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
