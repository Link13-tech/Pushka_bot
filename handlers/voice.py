import os

from aiogram import Router, types
from aiogram.types import CallbackQuery, ContentType, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from database.database import get_async_session
from database.voice_ops import get_original_text
from audio.processing import (
    convert_ogg_to_wav,
    reduce_noise,
    recognize_speech_from_audio,
    clean_text, merge_lines, jaccard_similarity_with_fuzzy,
)

router = Router()


class RecordVoiceState(StatesGroup):
    waiting_for_voice = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å"
@router.callback_query(lambda c: c.data.startswith("record_"))
async def start_recording(callback: CallbackQuery, state: FSMContext):
    poem_id = int(callback.data.split("_")[1])
    await state.update_data(poem_id=poem_id)
    await state.set_state(RecordVoiceState.waiting_for_voice)
    await callback.message.answer("üé§ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.  –ù–µ –∑–∞–±—ã–≤–∞–π —á–∏—Ç–∞—Ç—å —Å—Ç–∏—Ö –≥—Ä–æ–º–∫–æ –∏ —Å —á—É–≤—Å—Ç–≤–æ–º!!‚ò∫‚ò∫")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(RecordVoiceState.waiting_for_voice)
async def process_voice_message(message: types.Message, state: FSMContext):
    if message.content_type != ContentType.VOICE:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ

    user_id = message.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    poem_id = state_data["poem_id"]
    level = state_data["current_level"]
    poem_message_id = state_data.get("poem_message_id")

    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    voice_file = await message.bot.get_file(message.voice.file_id)
    ogg_path = f"audio/files/{user_id}_voice.ogg"
    wav_path = f"audio/files/{user_id}_voice.wav"
    clean_wav_path = f"audio/files/{user_id}_voice_clean.wav"
    await message.bot.download_file(voice_file.file_path, ogg_path)

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        convert_ogg_to_wav(ogg_path, wav_path)
        reduce_noise(wav_path, clean_wav_path)
        recognized_text = recognize_speech_from_audio(clean_wav_path)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with get_async_session() as session:
            original_text = await get_original_text(session, poem_id)

        # –í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        merged_original_text = merge_lines(original_text)

        # –û—á–∏—â–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        cleaned_original_text = clean_text(merged_original_text)

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        similarity = jaccard_similarity_with_fuzzy(recognized_text, cleaned_original_text)

        await message.bot.delete_message(message.chat.id, poem_message_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        next_level = level + 1
        buttons = [
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data=f"train_{poem_id}_{next_level}")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π
        await message.answer(
            f"üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{recognized_text}\n\n"
            f"üìú –≠—Ç–∞–ª–æ–Ω:\n{original_text}\n\n"
            f"‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {similarity}%",
            reply_markup=keyboard
        )

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in [ogg_path, wav_path, clean_wav_path]:
            if os.path.exists(path):
                os.remove(path)
