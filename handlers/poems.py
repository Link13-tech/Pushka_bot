from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.database import get_async_session
from sqlalchemy import text
from levels.training_levels import apply_difficulty_level
from database.user_db import upsert_user_poem_result, update_current_poem_id, update_current_level

router = Router()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ callback.data
def extract_poem_id(callback_data: str) -> int:
    return int(callback_data.split("_")[1])


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∏—Ö–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
@router.callback_query(lambda c: c.data == "search_alphabet")
async def search_alphabet_handler(callback: CallbackQuery):
    async with get_async_session() as session:
        query = text("SELECT id, title FROM poems ORDER BY title ASC")
        poems = await session.execute(query)
        poems_list = poems.fetchall()

        if poems_list:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text=poem[1], callback_data=f"poem_{poem[0]}")] for poem in poems_list]
            )
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:", reply_markup=keyboard)
        else:
            await callback.message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
@router.callback_query(lambda c: c.data.startswith("poem_"))
async def poem_selected_handler(callback: CallbackQuery):
    poem_id = extract_poem_id(callback.data)

    async with get_async_session() as session:
        query = text("SELECT title FROM poems WHERE id = :id")
        poem = await session.execute(query, {"id": poem_id})
        result = poem.fetchone()

        if result:
            title = result[0]
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f'''–£—á–∏—Ç—å "{title}"''', callback_data=f"train_{poem_id}_0")]
                ]
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑—É—á–µ–Ω–∏—è
            await callback.message.answer(f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è <b>{title}</b>.", reply_markup=keyboard)
        else:
            await callback.message.answer("–¢–∞–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è
@router.callback_query(lambda c: c.data == "random_poem")
async def random_poem_handler(callback: CallbackQuery):

    async with get_async_session() as session:
        query = text("SELECT title, id FROM poems ORDER BY RANDOM() LIMIT 1")
        poem = await session.execute(query)
        result = poem.fetchone()

        if result:
            title, poem_id = result
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f'''–£—á–∏—Ç—å "{title}"''', callback_data=f"train_{poem_id}_0")],
                    [InlineKeyboardButton(text="–ù–µ –±—É–¥—É —É—á–∏—Ç—å, —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏", callback_data="share")]
                ]
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–∏
            await callback.message.answer(f"–Ø –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ <b>{title}</b>.\n–ù–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ!", reply_markup=keyboard)
        else:
            await callback.message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π.")


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def handle_training_level(callback: CallbackQuery, level: int):
    poem_id = extract_poem_id(callback.data)
    user_id = callback.from_user.id
    async with get_async_session() as session:
        query = text("SELECT title, content FROM poems WHERE id = :id")
        poem = await session.execute(query, {"id": poem_id})
        result = poem.fetchone()

        if result:
            title, content = result
            modified_content = apply_difficulty_level(content, level)
            next_level = level + 1

            # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤ UserPoem –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if level == 0:
                await update_current_poem_id(session, user_id, poem_id)
                await update_current_level(session, user_id, level)
                await upsert_user_poem_result(session, user_id, poem_id, status='in_progress')

            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
            if level > 0:
                await update_current_level(session, user_id, level)

            buttons = []
            if level < 4:
                buttons.append([InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å", callback_data=f"record_{poem_id}_{next_level}")])
                buttons.append([InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data=f"train_{poem_id}_{next_level}")])
            else:
                buttons.append([InlineKeyboardButton(text="–Ø –≤—ã—É—á–∏–ª!", callback_data=f"finished_{poem_id}")])

            if buttons:
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                await callback.message.answer(f"üìú <b>{title}</b>\n\n{modified_content}", reply_markup=keyboard)
            else:
                await callback.message.answer(f"üìú <b>{title}</b>\n\n{modified_content}")
        else:
            await callback.message.answer("–¢–∞–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.callback_query(lambda c: c.data.startswith("train_"))
async def training_handler(callback: CallbackQuery):
    level = int(callback.data.split("_")[2])
    await handle_training_level(callback, level)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("finished_"))
async def finished_handler(callback: CallbackQuery):
    poem_id = extract_poem_id(callback.data)
    user_id = callback.from_user.id

    async with get_async_session() as session:
        query = text("SELECT title FROM poems WHERE id = :id")
        poem = await session.execute(query, {"id": poem_id})
        result = poem.fetchone()

        if result:
            title = result[0]
            # –°–æ–æ–±—â–∞–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await callback.message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã—É—á–∏–ª–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ: {title}")

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ User-DB
            await upsert_user_poem_result(session, user_id, poem_id, status='finished')

            # –û–±–Ω—É–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∏—Ö
            await update_current_poem_id(session, user_id, None)
            await update_current_level(session, user_id, 0)
        else:
            await callback.message.answer("–¢–∞–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
