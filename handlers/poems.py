from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaPhoto

from database import user_db
from database.database import get_async_session
from sqlalchemy import text
from levels.training_levels import apply_difficulty_level
from database.user_db import upsert_user_poem_result, update_current_poem_id, update_current_level


router = Router()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ callback.data
def extract_poem_id(callback_data: str) -> int:
    return int(callback_data.split("_")[1])


POEMS_PER_PAGE = 10


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ–∏—Å–∫–∞ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
@router.callback_query(lambda c: c.data.startswith("search_alphabet"))
async def search_alphabet_handler(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    telegram_user_id = callback.from_user.id
    async with get_async_session() as session:
        user = await user_db.get_or_create_user(session, telegram_user_id, callback.from_user.username)
        user_id = user.id

        if callback.data == "search_alphabet":
            await callback.message.delete()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        page = 1
        if callback.data != "search_alphabet":
            try:
                page = int(callback.data.split("_")[-1])
            except ValueError:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
                return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏—Ö–æ–≤
        count_query = text("SELECT COUNT(*) FROM poems")
        count_result = await session.execute(count_query)
        total_poems = count_result.scalar()

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏—Ö–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        query = text("""
            SELECT p.id, p.title,
                   COALESCE(up.status, 'not_started') AS status
            FROM poems p
            LEFT JOIN user_poems up
            ON p.id = up.poem_id AND up.user_id = :user_id
            ORDER BY p.title ASC
            LIMIT :limit OFFSET :offset
        """)
        result = await session.execute(query, {"user_id": user_id, "limit": POEMS_PER_PAGE, "offset": (page - 1) * POEMS_PER_PAGE})
        poems_list = result.fetchall()

        if poems_list:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∏—Ö–æ–≤
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"{poem[1]} ‚úÖ" if poem[2] == "finished" else poem[1],
                            callback_data=f"poem_{poem[0]}"
                        )
                    ]
                    for poem in poems_list
                ]
            )

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = []
            if page > 1:
                navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_alphabet_{page - 1}"))
            if page * POEMS_PER_PAGE < total_poems:
                navigation_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"search_alphabet_{page + 1}"))

            if navigation_buttons:
                keyboard.inline_keyboard.append(navigation_buttons)

            if callback.data == "search_alphabet":
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:", reply_markup=keyboard)
            else:
                await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:", reply_markup=keyboard)
        else:
            await callback.message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–π.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
@router.callback_query(lambda c: c.data.startswith("poem_"))
async def poem_selected_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    poem_id = extract_poem_id(callback.data)

    async with get_async_session() as session:
        query = text("SELECT title, image FROM poems WHERE id = :id")
        poem = await session.execute(query, {"id": poem_id})
        result = poem.fetchone()

        if result:
            title, image = result
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text=f'''–£—á–∏—Ç—å "{title}"''', callback_data=f"train_{poem_id}_0")]]
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º poem_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.update_data(poem_id=poem_id, title=title)

            if image:
                image = FSInputFile(image)
                await callback.message.answer_photo(
                    photo=image,
                    caption=f'''–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è <b>"{title}"</b>.''',
                    reply_markup=keyboard
                )
            else:
                await callback.message.answer(
                    f'''–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è <b>"{title}"</b>.''',
                    reply_markup=keyboard
                )
        else:
            await callback.message.answer("–¢–∞–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è
@router.callback_query(lambda c: c.data == "random_poem")
async def random_poem_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    async with get_async_session() as session:
        query = text("SELECT title, id, image FROM poems ORDER BY RANDOM() LIMIT 1")
        poem = await session.execute(query)
        result = poem.fetchone()

        if result:
            title, poem_id, image = result
            await state.update_data(poem_id=poem_id, title=title)

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f'''–£—á–∏—Ç—å "{title}"''', callback_data=f"train_{poem_id}_0")],
                    [InlineKeyboardButton(text="–£–∂–µ –≤—ã—É—á–∏–ª, —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏", callback_data="share")],
                    [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", callback_data="start_study")]
                ]
            )

            if image:
                image = FSInputFile(image)
                await callback.message.answer_photo(
                    photo=image,
                    caption=f'''–Ø –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ <b>"{title}"</b>.\n–ù–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ!''',
                    reply_markup=keyboard
                )
            else:
                await callback.message.answer(
                    f'''–Ø –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ <b>"{title}"</b>.\n–ù–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ!''',
                    reply_markup=keyboard
                )


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def handle_training_level(callback: CallbackQuery, level: int, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    poem_id = extract_poem_id(callback.data)
    user_id = callback.from_user.id
    title = data["title"]

    print(f"ID —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è: {poem_id}")
    print(f"Title —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è: {title}")

    async with get_async_session() as session:
        query = text("SELECT title, content FROM poems WHERE id = :id")
        poem = await session.execute(query, {"id": poem_id})
        result = poem.fetchone()

        if result:
            title, content = result
            modified_content = apply_difficulty_level(content, level)
            next_level = level + 1

            # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –≤ UserPoem –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if level == 0:
                await update_current_poem_id(session, user_id, poem_id)
                await update_current_level(session, user_id, level)
                await upsert_user_poem_result(session, user_id, poem_id, status='in_progress')

            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
            if level > 0:
                await update_current_level(session, user_id, level)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–µ–π—Ç–µ
            await state.update_data(poem_id=poem_id, current_level=level)

            buttons = []
            if level < 4:
                buttons.append([InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å", callback_data=f"record_{poem_id}_{next_level}")])
                buttons.append([InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data=f"train_{poem_id}_{next_level}")])
            else:
                buttons.append([InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å", callback_data=f"record_{poem_id}_{level}")])
                buttons.append([InlineKeyboardButton(text="–Ø –≤—ã—É—á–∏–ª(–∞)!", callback_data=f"finished_{poem_id}")])

            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            poem_message = await callback.message.answer(f"üìú <b>{title}</b>\n{modified_content}", reply_markup=keyboard)
            await state.update_data(poem_message_id=poem_message.message_id)
        else:
            await callback.message.answer("–¢–∞–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.callback_query(lambda c: c.data.startswith("train_"))
async def training_handler(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    message_ids = state_data.get("message_ids", [])
    if len(message_ids) > 1:
        for message_id in message_ids[:-1]:
            try:
                await callback.message.bot.delete_message(callback.message.chat.id, message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    level = int(callback.data.split("_")[2])
    await handle_training_level(callback, level, state)


@router.callback_query(lambda query: query.data.startswith("finished_"))
async def finished_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º `poem_id` –∏ `poem_title` –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    poem_id = data.get('poem_id')
    title = data.get("title")

    async with get_async_session() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –Ω–∞ 'finished'
        await upsert_user_poem_result(session, user_id, poem_id, status='finished')
        await update_current_poem_id(session, user_id, None)
        await update_current_level(session, user_id, 0)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –∏ "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"
    share_message = (
        f"üåü –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å! –°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ <b>{title}</b> –≤—ã—É—á–µ–Ω–æ.üåü "
        f"–í–µ—Å—å –ø—É—Ç—å –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞ –ø—Ä–æ–π–¥–µ–Ω, –∏ —ç—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä—É—Ç–æ! üéâ "
        f"–¢–≤–æ—è –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º –∏ –∂–µ–ª–∞–Ω–∏–µ —É—á–∏—Ç—å—Å—è ‚Äì –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç. –¢–µ–ø–µ—Ä—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –±—É–º–∞–≥–µ, –∞ —á–∞—Å—Ç—å —Ç–µ–±—è! üìñ‚ú®"
        f"–ü–æ—á–µ–º—É –±—ã –Ω–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º —Å –±–ª–∏–∑–∫–∏–º–∏? –û–Ω–∏ —Ç–æ—á–Ω–æ –æ—Ü–µ–Ω—è—Ç —Ç–≤–æ–∏ —Å—Ç–∞—Ä–∞–Ω–∏—è!"
    )

    share_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_poem")],
            [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", callback_data="start_study")]
        ]
    )

    image_path = "media/dialogs/–¢—ã –≤—ã—É—á–∏–ª —Å—Ç–∏—Ö.png"
    image = FSInputFile(image_path)

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=image,
            caption=share_message
        ),
        reply_markup=share_keyboard
    )
